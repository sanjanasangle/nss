#include <stdio.h>
#include <math.h>

// Function to perform modular exponentiation
long long power(long long base, long long exp, long long mod) {
    long long res = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            res = (res * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return res;
}

int main() {
    long long p, g, a, b, A, B, keyA, keyB;

    // Prime number (p) and primitive root (g)
    p = 23;  
    g = 5;

    // Private keys (chosen randomly)
    a = 6;   
    b = 15;  

    // Calculate public keys
    A = power(g, a, p);
    B = power(g, b, p);

    printf("Public key A: %lld\n", A);
    printf("Public key B: %lld\n", B);

    // Calculate shared secret keys
    keyA = power(B, a, p);
    keyB = power(A, b, p);

    printf("Shared key calculated by A: %lld\n", keyA);
    printf("Shared key calculated by B: %lld\n", keyB);

    return 0;
}
